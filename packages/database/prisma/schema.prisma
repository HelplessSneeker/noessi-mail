generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  password        String
  name            String?
  isEmailVerified Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  refreshTokens   RefreshToken[]
  emailAccounts   EmailAccount[]
  emails          Email[]

  @@map("users")
}

model RefreshToken {
  id          String   @id @default(cuid())
  token       String   @unique
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt   DateTime
  createdAt   DateTime @default(now())

  @@index([userId])
  @@map("refresh_tokens")
}

model EmailAccount {
  id              String   @id @default(cuid())
  email           String
  provider        String   // gmail, outlook, imap, etc
  
  // OAuth2 fields (for Gmail, Outlook)
  accessToken     String?  @db.Text
  refreshToken    String?  @db.Text
  tokenExpiresAt  DateTime?
  
  // IMAP/SMTP fields (for manual configuration)
  imapHost        String?
  imapPort        Int?
  imapSecurity    String?  // tls, starttls, none
  smtpHost        String?
  smtpPort        Int?
  smtpSecurity    String?  // tls, starttls, none
  password        String?  @db.Text // Encrypted password for IMAP/SMTP
  
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([email, userId])
  @@index([userId])
  @@map("email_accounts")
}

model Email {
  id              String    @id @default(cuid())
  messageId       String    @unique // RFC 2822 Message-ID
  subject         String?
  body            String?   @db.Text
  bodyHtml        String?   @db.Text
  fromAddress     String
  fromName        String?
  toAddresses     String[]  // JSON array of email addresses
  ccAddresses     String[]  @default([])
  bccAddresses    String[]  @default([])
  isRead          Boolean   @default(false)
  isStarred       Boolean   @default(false)
  isImportant     Boolean   @default(false)
  isArchived      Boolean   @default(false)
  isDeleted       Boolean   @default(false)
  isDraft         Boolean   @default(false)
  sentAt          DateTime?
  receivedAt      DateTime
  folderName      String?   // INBOX, SENT, DRAFTS, etc
  threadId        String?   // For email threading
  inReplyTo       String?   // Message-ID of parent email
  references      String[]  @default([]) // Message-IDs for threading
  attachments     Json?     // JSON array of attachment metadata
  size            Int?      // Email size in bytes
  labels          String[]  @default([]) // Custom labels/tags
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailAccountId  String?   // Which account this email belongs to
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([userId])
  @@index([messageId])
  @@index([threadId])
  @@index([sentAt])
  @@index([receivedAt])
  @@index([isRead])
  @@index([folderName])
  @@map("emails")
}